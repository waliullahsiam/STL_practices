//#include<bits/stdc++.h>
//using namespace std;
//
//bool solve(string str)
//{
//    stack<char>st;
//    for(int i=0; i<str.size(); i++)
//    {
//
//        if(str[i]=='('||str[i]=='{'||str[i]=='[')
//        {
//            st.push(str[i]);
//
//        }
//        else if(str[i]==')')
//        {
//            if(st.top()=='(')
//            {
//                st.pop();
//            }
//            else
//            {
//                return false;
//                break;
//            }
//        }
//
//        else if(str[i]=='}')
//        {
//            if(st.top()=='{')
//            {
//                st.pop();
//            }
//            else
//            {
//                return false;
//                break;
//            }
//        }
//
//        else if(str[i]==']')
//        {
//            if(st.top()=='[')
//            {
//                st.pop();
//            }
//            else
//            {
//                return false;
//                break;
//            }
//        }
//    }
//
//    if(!st.empty())
//    {
//        return false;
//    }
//    else
//    {
//        return true;
//    }
//}
//
//int main()
//{
//
//    //balanced parenthesis;
//
//    //using stack;
//    //checking if
//
//    string str;
//    cin>>str;
//    bool res=solve(str);
//
//    if(res)
//    {
//        cout<<"YES";
//    }
//
//    else
//    {
//        cout<<"No\n";
//    }
//
//    return 0;
//
//
//
//}

#include<bits/stdc++.h>
using namespace std;
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    //iterator uses;

//    vector<int>vec={1,2,3,4,5};
//
//    vector<int>:: iterator it;
//
//    for(it=vec.begin();it!=vec.end();it++)
//    {
//
//        if(*it==2)
//        {
//            *it=7;
//        }
//    }
//
//      for(it=vec.begin();it!=vec.end();it++)
//    {
//
//       cout<<*it<<" ";
//    }
//


//using sets
//
//set<int,greater<int>>s;
//
//s.insert(4);
//s.insert(2);
//
//s.insert(5);
//s.insert(1);
//
//set<int>::iterator it;
//
//for(it=s.begin();it!=s.end();it++)
//{
//    if(*it==4)
//    {
//        s.erase(it);
//    }
//}
//
//for(it=s.begin();it!=s.end();it++)
//{
//    cout<<(*it)<<" ";
//}
//
//int n;
//n=s.size();
//
//cout<<n<<endl;
//
//s.clear();


//about pairs



//maps

//vector<int>v={1,2,2,1,3,4,5,6,7};
//
//map<int,int>mp;
//
//for(int i=0;i<v.size();i++)
//{
//    mp[v[i]]++;
//
//}
//for(auto i:mp)
//{
//    cout<<i.first<<" "<<i.second;
//
//    cout<<endl;
//}

//stack

//stack<int>st;
//
//st.push(4);
//st.push(10);
//st.push(3);
//
//while(!st.empty())
//{
//    cout<<st.top()<<" ";
//    st.pop();
//}



//bitset

// C++ program to demonstrate various functionality of bitset

    // default constructor initializes with all bits 0
//    bitset<32> bset1;
//
//    // bset2 is initialized with bits of 20
//    bitset<32> bset2(20);
//
//    // bset3 is initialized with bits of specified binary string
//    bitset<M> bset3(string("1100"));
//
//    //converting the bit string to number
//
//    cout<<bset3.to_ullong()<<endl;
//
//    // cout prints exact bits representation of bitset
//    cout << bset1 << endl; // 00000000000000000000000000000000
//    cout << bset2 << endl; // 00000000000000000000000000010100
//    cout << bset3 << endl; // 00000000000000000000000000001100
//    cout << endl;
//
//    // declaring set8 with capacity of 8 bits
//
//    bitset<8> set8; // 00000000
//
//    // setting first bit (or 6th index)
//    set8[1] = 1; // 00000010
//    set8[4] = set8[1]; // 00010010
//    cout << set8 << endl;
//
//    // count function returns number of set bits in bitset
//    int numberof1 = set8.count();
//
//    // size function returns total number of bits in bitset
//    // so there difference will give us number of unset(0)
//    // bits in bitset
//    int numberof0 = set8.size() - numberof1;
//
//    cout << set8 << " has " << numberof1 << " ones and "
//         << numberof0 << " zeros\n";
//
//    // test function return 1 if bit is set else returns 0
//    cout << "bool representation of " << set8 << " : ";
//    for (int i = 0; i < set8.size(); i++)
//        cout << set8.test(i) << " ";
//
//    cout << endl;
//
//    // any function returns true, if atleast 1 bit
//    // is set
//    if (!set8.any())
//        cout << "set8 has no bit set.\n";
//
//    if (!bset1.any())
//        cout << "bset1 has no bit set.\n";
//
//    // none function returns true, if none of the bit
//    // is set
//    if (!bset1.none())
//        cout << "bset1 has some bit set\n";
//
//    // bset.set() sets all bits
//    cout << set8.set() << endl;
//
//    // bset.set(pos, b) makes bset[pos] = b
//    cout << set8.set(4, 0) << endl;
//
//    // bset.set(pos) makes bset[pos] = 1  i.e. default
//    // is 1
//    cout << set8.set(4) << endl;
//
//    // reset function makes all bits 0
//    cout << set8.reset(2) << endl;
//    cout << set8.reset() << endl;
//
//    // flip function flips all bits i.e.  1 <-> 0
//    // and  0 <-> 1
//    cout << set8.flip(2) << endl;
//    cout << set8.flip() << endl;
//
//    // Converting decimal number to binary by using bitset
//    int num = 100;
//    cout << "\nDecimal number: " << num
//         << "  Binary equivalent: " << bitset<8>(num);
//
//    return 0;


//bitset2
//
//bitset<5>bset(6);
//
//cout<<bset<<endl;
//
//bitset<32>bset2;
//bset2.set();
//cout<<bset2<<endl;
//
//bset2.reset();
//cout<<bset2<<endl;
//
//bitset<8>bset3(string("1010100"));
//
//bset3[2]=0;
//cout<<bset3<<endl;
//
//cout<<bset3.flip()<<endl;





}
